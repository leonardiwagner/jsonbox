package io.jsonbox;

import java.util.HashMap;
import java.io.IOException;

public class JsonBoxStorage {
    private final Http http = new Http();
    private String id = "";
    private String boxId = "";
    private String collectionId = "";
    
    /**
     * Instance for a jsonbox.io box.
     * @param  boxId A jsonbox.io box id. It has to be at least 20 characters long. Only alphanumeric, & and _ characters allowed.
     */
    public JsonBoxStorage(String boxId) {
        this.id = boxId;
        this.boxId = boxId;
    }

    /**
     * Instance for a jsonbox.io collection inside a box.
     * @param  boxId A jsonbox.io box id. It has to be at least 20 characters long. Only alphanumeric, & and _ characters allowed.
     * @param  collectionId A collection id inside a box. Only alphanumeric, & and _ characters allowed.
     */
    public JsonBoxStorage(String boxId, String collectionId) {
        this.id = boxId + "/" + collectionId;
        this.boxId = boxId;
        this.collectionId = collectionId;
    }

    /**
     * Create a record (HTTP POST)
     * @param  json a JSON string record to be created on jsonbox.io
     * @return      a JSON string response from jsonbox.io
     */
    public String create(String json) throws IOException {
        return http.request(this.id, null, "POST", new HashMap<String, String>(), json);
    }

    /**
     * Read all records (HTTP GET)
     * @return a JSON string response from jsonbox.io
     */
    public String read() throws IOException {
        return http.request(this.id, null, "GET",  new HashMap<String, String>(), null);
    }

    /**
     * Read records with given filter parameters (HTTP GET)
     * @param  sort sort the result set by the specific field. Add a prefix "-" to sort in reverse order. (default: "-_createdOn")
     * @param  skip skip certain number of records, it can be used for pagination. (default: 0)
     * @param  limit limit the results to a certain number of records, it can be used for pagination. (default: 20, max: 1000)
     * @param  query query for filtering values, check format at: https://github.com/vasanthv/jsonbox#filtering
     * @return      a JSON string response from jsonbox.io
     */
    public String read(String sort, int skip, int limit, String query) throws IOException {
        HashMap<String, String> parameters = new HashMap<String, String>();
        parameters.put("sort", sort);
        parameters.put("skip", Integer.toString(skip));
        parameters.put("limit", Integer.toString(limit));
        parameters.put("query", query);

        return http.request(this.id, null, "GET", parameters, null);
    }

    /**
     * Update a record (HTTP PUT)
     * @param  recordId the record id (property "_id" generated by jsonbox.io on creation) to be updated.
     * @param  json     a JSON string record to be updated. Please note that this will not patch the record, it is a full update. A bulk update is not supported yet.
     * @return          a JSON string response from jsonbox.io
     */
    public String updateByRecordId(String recordId, String json) throws IOException {
        return http.request(this.id, recordId, "PUT",  new HashMap<String, String>(), json);
    }

    /**
     * Delete a single record (HTTP DELETE)
     * @param  recordId the record id (property "_id" generated by jsonbox.io on creation) to be deleted.
     * @return          a JSON string response from jsonbox.io
     */
    public String deleteByRecordId(String recordId) throws IOException {
        return http.request(this.id, recordId, "DELETE",  new HashMap<String, String>(), null);
    }

    /**
     * Delete multiple records (HTTP DELETE)
     * @param  query query for filtering values, check format at: https://github.com/vasanthv/jsonbox#filtering
     * @return       a JSON string response from jsonbox.io
     */
    public String deleteByQuery(String query) throws IOException {
        HashMap<String, String> parameters = new HashMap<String, String>();
        parameters.put("query", query);

        return http.request(this.id, null, "DELETE", parameters, null);
    }

    /**
     * Get the instance box id.
     * @return instance box id.
     */
    public String getBoxId(){
        return this.boxId;
    }

    /**
     * Get the instance collection id inside a box.
     * @return collection id.
     */
    public String getCollectionId(){
        return this.collectionId;
    }
}
